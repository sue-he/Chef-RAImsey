import random
from preprocessing import allergen

class Recipe:
  '''
  Class that represents a Recipe object.
  '''
  def __init__(self, name, recipe_type=None, summary, ingredients):
    '''
    Constructor
    Args:
      name: name of the recipe
      type: type of the recipe (cookies, cakes, etc)
      summary: summary of the recipe
      ingredients: list of tuples (ingredient, amount)
    '''
    self.name = name
    self.recipe_type = recipe_type
    self.summary = summary
    self.ingredients = ingredients
  
  def __repr__(self):
    return f'''
    {self.name}
    {self.recipe_type}
    {self.summary}
    {self.ingredients}
    '''
    
class Chef_Raimsey:
  '''
  Class that represents a Chef Raimsey simulation.
  '''
  def find_frequently_paired_ingredient(ingredient):
    '''
    Method to find a frequently paired ingredient with the one given.

    Args:
      ingredient: ingredient 
    Returns:
      a frequently paired ingredient 
    '''
    pass

  def find_frequently_used_amount(ingredient):
    '''
    Method to find a frequently used amount of the ingredient.

    Args:
      ingredient: ingredient
    Returns:
      amount that the ingredient is frequently used for.
    '''
    pass

  #Maanya
  def num_of_ingredients():
    '''
    Method to get the number of ingredients
    '''
    number_of_ingredients = random.randint(6, 12)
    return number_of_ingredients

  def generate(user_favorite_food):
    '''
    Uses user's favorite ingredient or food to initiate the recipe generation process.

    Args:
      user_favorite_food: user-specied favorite food/ingredient
    Returns:
      A recipe object
    '''
    # start generation process off of the user's favorite food
    pass

  def categorize(recipe):
    '''
    Once the recipe is generated by Chef Raimsey, use BOW/LSA/Doc2Vec to find which category of desserts the generated recipe resembles the most, and assign the recipe that type, and save it in the newly_generated_recipe folder in the appropriate sub-folder (i.e. "Cookies")

    Args:
      recipe: generated Recipe object
    Returns:
      None, but saves the recipe string in the appropriate category folder
    '''
    pass

  def name_recipe(recipe):
    '''
    Once the recipe is categorized, name the recipe using the recipe type + some other information (such as "main" ingredient) or excerpts from summaries 

    Args:
      recipe: generated Recipe object 
    Returns:
      name of the recipe
    '''
    pass

  #Maanya
  def conversation_starter():
    '''
    First few words of the greatest dessert Chef ever.
    '''
    name = input("Hi. This is Chef Raimsey! And what is your name? ")
    favorite_ingredient = input("Oh Great! Hi ", name, ". What is your favorite ingredient in a dessert ")
    allergic = input(favorite_ingredient.upper(), "! Yummy!! And do you have any allergies that I should be aware of (Y/N)? ")
    while allergic != "Y" and allergic != "N":
        allergic = ("I need a Yes or No response (Y/N). ")
    if allergic == "Y":
        allergen = input("Oh no! I will generate a recipe for you that takes the allergy into account. So what is it that you are allergic to? Here is a list of possible options to help you out. Choose one. ")
        allergens_dict = allergen()
        list_of_allergens = allergens_dict.keys()
        for idx in range(len(list_of_allergens)):
            print(idx, element)
    else:
        print("Ok cool. We can move on then!")

  def main():
    '''
    Method to get the Chef working!
    '''
    pass
  
  if __name__ == "__main__":
    main()

  